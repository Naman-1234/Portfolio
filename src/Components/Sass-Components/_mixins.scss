@mixin centeredGrid {
  display: grid;
  place-items: center;
}

@mixin backGround
{
background-repeat: no-repeat;
background-size: contain;
}

// Note in these type of mixins first word refers to 
//justify content and second to align items

//Using inheritance to remove redundancy
.colflex {
  display: flex;
  flex-direction: column; 
}
@mixin spaceAroundEndFlex
{
    @extend .colflex;
    justify-content: space-around;
    align-items: flex-end;
}

@mixin spaceAroundFlex 
{
  @extend .colflex;
  justify-content: space-around;
}

@mixin centeredFlex
{
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin SimpleGrid {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  row-gap: 30px;
  grid-template-rows: auto;
}


//Coming on to responsive part
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}